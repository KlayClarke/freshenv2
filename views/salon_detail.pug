extends layout 
block content 
  .salon-detail-wrapper 
    .salon-detail-container
      .top-section.border-radius-6px
        .left 
          if salon.image 
            img(src=`${salon.image}`, alt="salon" class='border-radius-6px blue-glow')
          else 
            img(src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/2048px-No_image_available.svg.png", alt="image not found" class='border-radius-8px')
        .right 
          h1= salon.name 
          br
          h2 #{salon.street_address} #{salon.city}, #{salon.state} #{salon.zip_code}
      if currentUser && currentUser._id.toString() == salon.author._id.toString()
        .salon-buttons-container
          a.button.button-l.button-warning.border-radius-6px(href=`/explore/detail/${salon._id}/update`) Edit   
          a.button.button-l.button-danger.border-radius-6px(href=`/explore/detail/${salon._id}/delete`) Delete 
      #map.bottom-section.border-radius-6px
      .review-section.border-radius-6px
        form(action=`/explore/detail/${salon._id}/reviews` method='POST') 
          .form-section  
            fieldset.starability-basic
              input(type="radio" id='first-rate1' name='review[rating]' value='1' required)
              label(for="first-rate1" title='Terrible') 1 Star 
              input(type="radio" id='first-rate2' name='review[rating]' value='2' required)
              label(for="first-rate2" title='Not Good') 2 Star 
              input(type="radio" id='first-rate3' name='review[rating]' value='3' required checked)
              label(for="first-rate3" title='Average') 3 Star 
              input(type="radio" id='first-rate4' name='review[rating]' value='4' required)
              label(for="first-rate4" title='Good') 4 Star 
              input(type="radio" id='first-rate5' name='review[rating]' value='5' required)
              label(for="first-rate5" title='Amazing') 5 Star 
          .form-section
            if !currentUser  
              textarea#body(name="review[body]" required disabled)
            else 
              textarea#body(name="review[body]" required)
          .form-section
            if !currentUser  
              button.button.button-s.button-success.border-radius-4px(disabled) Submit 
            else 
              button.button.button-s.button-success.border-radius-4px Submit 
        .reviews-list
          if salon.reviews.length < 1
            if currentUser 
              h1.lightgray Be the first to leave a review 
            else 
              h1.lightgray You must login to leave a review
          else 
            each review in salon.reviews
              .review-card
                .review-card-body 
                  h6.review-card-title #{review.author.username}
                  p.starability-result(data-rating=`${review.rating}`) Rated: #{review.rating} stars 
                  p= review.body 
                  if currentUser && review.author._id.toString() == currentUser._id.toString()
                    form(action=`/explore/detail/${salon._id}/reviews/${review._id}` method='DELETE') 
                      button.button.button-s.button-danger Delete 
  script.
    var salonName = "!{salon.name}"
    var salonCoordinates = [!{salon.geometry.coordinates}]
    mapboxgl.accessToken = `!{process.env.MBX_TOKEN}`
   const map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/streets-v11",
      zoom: 18,
      center: salonCoordinates,
      pitch: 60,
      antialias: true, // create the gl context with MSAA antialiasing, so custom layers are antialiased
    });

    map.addControl(new mapboxgl.FullscreenControl());

    const marker1 = new mapboxgl.Marker()
      .setLngLat(salonCoordinates)
      .setPopup(
        new mapboxgl.Popup({ offset: 25 }).setHTML(`<h2>${salonName}</h2>`)
      )
      .addTo(map);

    // parameters to ensure the model is georeferenced correctly on the map
    const modelOrigin = salonCoordinates;
    const modelAltitude = 0;
    const modelRotate = [Math.PI / 2, 0, 0];

    const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(
      modelOrigin,
      modelAltitude
    );

    // transformation parameters to position, rotate and scale the 3D model onto the map
    const modelTransform = {
      translateX: modelAsMercatorCoordinate.x,
      translateY: modelAsMercatorCoordinate.y,
      translateZ: modelAsMercatorCoordinate.z,
      rotateX: modelRotate[0],
      rotateY: modelRotate[1],
      rotateZ: modelRotate[2],
      /* Since the 3D model is in real world meters, a scale transform needs to be
      * applied since the CustomLayerInterface expects units in MercatorCoordinates.
      */
      scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits(),
    };

    const THREE = window.THREE;

    // configuration of the custom layer for a 3D model per the CustomLayerInterface
    const customLayer = {
      id: "3d-model",
      type: "custom",
      renderingMode: "3d",
      onAdd: function (map, gl) {
        this.camera = new THREE.Camera();
        this.scene = new THREE.Scene();

        // create two three.js lights to illuminate the model
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(0, -70, 100).normalize();
        this.scene.add(directionalLight);

        const directionalLight2 = new THREE.DirectionalLight(0xffffff);
        directionalLight2.position.set(0, 70, 100).normalize();
        this.scene.add(directionalLight2);

        // use the three.js GLTF loader to add the 3D model to the three.js scene
        const loader = new THREE.GLTFLoader();
        loader.load(
          "https://docs.mapbox.com/mapbox-gl-js/assets/34M_17/34M_17.gltf",
          (gltf) => {
            this.scene.add(gltf.scene);
          }
        );
        this.map = map;

        // use the Mapbox GL JS map canvas for three.js
        this.renderer = new THREE.WebGLRenderer({
          canvas: map.getCanvas(),
          context: gl,
          antialias: true,
        });

        this.renderer.autoClear = false;
      },
      render: function (gl, matrix) {
        const rotationX = new THREE.Matrix4().makeRotationAxis(
          new THREE.Vector3(1, 0, 0),
          modelTransform.rotateX
        );
        const rotationY = new THREE.Matrix4().makeRotationAxis(
          new THREE.Vector3(0, 1, 0),
          modelTransform.rotateY
        );
        const rotationZ = new THREE.Matrix4().makeRotationAxis(
          new THREE.Vector3(0, 0, 1),
          modelTransform.rotateZ
        );

        const m = new THREE.Matrix4().fromArray(matrix);
        const l = new THREE.Matrix4()
          .makeTranslation(
            modelTransform.translateX,
            modelTransform.translateY,
            modelTransform.translateZ
          )
          .scale(
            new THREE.Vector3(
              modelTransform.scale,
              -modelTransform.scale,
              modelTransform.scale
            )
          )
          .multiply(rotationX)
          .multiply(rotationY)
          .multiply(rotationZ);

        this.camera.projectionMatrix = m.multiply(l);
        this.renderer.resetState();
        this.renderer.render(this.scene, this.camera);
        this.map.triggerRepaint();
      },
    };

    map.on("style.load", () => {
      map.addLayer(customLayer, "waterway-label");
    });